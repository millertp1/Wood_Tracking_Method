---
output:
  word_document: default
  pdf_document: default
  html_document: default
---
#Taylor Miller
#Date: 1/21/2019
#Intermediate R
#Contributors: Sam Norton, Kayla Pehl, JulieAnn, 




```{r}
data(iris)
head(iris)
sp_ids = unique(iris$Species)
output = matrix(0, nrow=length(sp_ids), ncol=ncol(iris)-1)
rownames(output) = sp_ids
colnames(output) = names(iris[ , -ncol(iris)])
for(i in seq_along(sp_ids)) {
    iris_sp = subset(iris, subset=Species == sp_ids[i], select=-Species)
    for(j in 1:(ncol(iris_sp))) {
        x = 0
        y = 0
        if (nrow(iris_sp) > 0) {
            for(k in 1:nrow(iris_sp)) {
                x = x + iris_sp[k, j]
                y = y + 1
            }
            output[i, j] = x / y 
        }
    }
}
output
```

```{r}
# 1. Describe the values stored in the object output. In other words what did the loops create?
 output[i, j] = x / y 
 
 
##The object output is the means
```



# 2. Describe using pseudo-code how output was calculated
 for(i in seq_along(sp_ids)) {
    iris_sp = subset(iris, subset=Species == sp_ids[i], select=-Species)
    for(j in 1:(ncol(iris_sp))) {
        x = 0
        y = 0
        #if (nrow(iris_sp) > 0) {
            for(k in 1:nrow(iris_sp)) {
                x = x + iris_sp[k, j]
                y = y + 1


 ## Loop from 1 to length of species identities
   #Take a subset of iris data 
   #Loop from 1 to number of columns of the iris data
      #If the iris data row is greater than 0 occurs then loop from 1 to the number of rows in the iris data
      #x equals 0 plus the row and column of the iris data
      #y equals y plus 1



```{r}
# 3. The variables in the loop were named so as to be vague. How can the objects output, x, and y could be renamed such that it is clearer what is occurring in the loop
 
#To be clearer 'output' could 


 #X is the sum of the observations
 #Y is the number of observations
 #The output is the mean 
``` 
 
```{r} 
# 4. is possible to accomplish the same task using fewer lines of code? Please suggest one other way to calculate output that decreases the number of loops by 1.


len = tapply(iris$Sepal.Length,iris$Species,mean)
wid = tapply(iris$Sepal.Width,iris$Species,mean)
plen = tapply(iris$Petal.Length,iris$Species,mean)
pwid = tapply(iris$Petal.Width,iris$Species,mean)

iris_dfs<-data.frame(len,wid,plen,pwid)
iris_dfs

#aggregate can be used as well
```


```{r}
# 5.You have a vector x with the numbers 1:10. Write a for loop that will produce a vector y that contains the sum of x up to that index of x. So for example the elements of x are 1, 2, 3, and so on and the elements of y would be 1, 3, 6, and so on.


x <- c(1:10)
y <- NULL

for(i in x)  {
 y[i] <-sum(x[1:i])
}
y
```

```{r}
# 6. Modify your for loop so that if the sum is greater than 10 the value of y is set to NA

x <- c(1:10)
y <- NULL

for(i in x)  {
 y[i] <-sum(x[1:i])
 if (y[i]>10) {
 y[i]=NA
 }
}
y
```


```{r}
# 7. Place your for loop into a function that accepts as its argument any vector of arbitrary length and it will return y.


df <- data.frame(cbind(c(1), c(2), c(3), c(4), c(5), c(6), c(7), c(8), c(9), c(10), c(11)))


sum_seq(df)
```


```{r}
 sum_seq <- function(x) {
  output <- NULL
  for(i in 1:ncol(df))
    output[i] = sum(x[1:i])
  {print (output)}
 }
sum_seq(x)
```





